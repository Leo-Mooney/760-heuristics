using JuMP
using HiGHS

pots = [
    [99.136, 0.051, 0.497],
    [99.733, 0.064, 0.138],
    [99.755, 0.083, 0.149],
    [99.198, 0.318, 0.206],
    [99.297, 0.284, 0.33],
    [99.23, 0.327, 0.393],
    [99.485, 0.197, 0.156],
    [99.709, 0.011, 0.056],
    [99.729, 0.007, 0.012],
    [99.118, 0.434, 0.377],
    [99.372, 0.01, 0.349],
    [99.505, 0.028, 0.433],
    [99.187, 0.296, 0.335],
    [99.043, 0.224, 0.531],
    [99.206, 0.166, 0.146],
    [99.395, 0.188, 0.328],
    [99.436, 0.199, 0.303],
    [99.796, 0.009, 0.144],
    [99.186, 0.397, 0.065],
    [99.455, 0.079, 0.278],
    [99.553, 0.084, 0.353],
    [99.539, 0.017, 0.201],
    [99.38, 0.082, 0.239],
    [99.504, 0.009, 0.273],
    [99.391, 0.261, 0.297],
    [99.374, 0.015, 0.578],
    [99.462, 0.179, 0.109],
    [99.03, 0.213, 0.459],
    [99.328, 0.131, 0.371],
    [99.674, 0.055, 0.249],
    [99.413, 0.137, 0.1],
    [99.538, 0.046, 0.151],
    [99.41, 0.109, 0.08],
    [99.163, 0.324, 0.343],
    [99.502, 0.036, 0.412],
    [99.66, 0.083, 0.069],
    [99.629, 0.156, 0.069],
    [99.592, 0.171, 0.008],
    [99.684, 0.011, 0.106],
    [99.358, 0.227, 0.137],
    [99.145, 0.161, 0.403],
    [99.729, 0.028, 0.123],
    [99.335, 0.181, 0.351],
    [99.725, 0.094, 0.14],
    [99.124, 0.325, 0.015],
    [99.652, 0.068, 0.029],
    [99.091, 0.268, 0.565],
    [99.426, 0.146, 0.256],
    [99.383, 0.266, 0.039],
    [99.481, 0.147, 0.327],
    [99.163, 0.121, 0.71]
    ]
    

grade_min_Al = [95.00,99.10,99.10,99.20,99.25,99.35,99.50,99.65,99.75,99.85,99.90]
grade_max_Fe = [5.00, 0.81, 0.81, 0.79, 0.76, 0.72, 0.53, 0.50, 0.46, 0.33, 0.30]
grade_max_Si = [3.00, 0.40, 0.41, 0.43, 0.39, 0.35, 0.28, 0.28, 0.21, 0.15, 0.15]
grade_value =  [10.00,21.25,26.95,36.25,41.53,44.53,48.71,52.44,57.35,68.21,72.56]

model = Model(HiGHS.Optimizer)

function calc_obj(x_opt)
    total = 0
    for i in 1:17
        quality = zeros(3)
        for j in 1:3
            quality[j] = (pots[value(x_opt[i, 1]), j] + pots[value(x_opt[i, 2]), j] + pots[value(x_opt[i, 3]), j])/3
          end
        tol = 0.00001
        for j in 11:-1:1
            if quality[1] >= grade_min_Al[j]-tol && quality[2] <= grade_max_Fe[j] + tol && quality[3] <= grade_max_Si[j] + tol
                total += grade_value[j]
                break
            end
        end
    end
    return total
end

@variable(model, x[1:17, 1:3], Int)

@objective(model, Max, calc_obj(x))

@constraint(model, 0 .<= x .<= 50)
optimize!(model)
@constraint(model, x .in MathOptInterface.IntegerSet())

for i in 1:3
    for j in 1:16
        for k in j+1:17
            @constraint(model, x[j,i] != x[k,i])
        end
    end
end

x_opt = value.(x)
f_opt = objective_value(model)
println(x_opt)
println(f_opt)
